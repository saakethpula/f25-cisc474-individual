/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as MessagesRouteImport } from './routes/messages'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CoursesIndexRouteImport } from './routes/courses/index'
import { Route as CoursesIdRouteImport } from './routes/courses/$id'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const MessagesRoute = MessagesRouteImport.update({
  id: '/messages',
  path: '/messages',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CoursesIndexRoute = CoursesIndexRouteImport.update({
  id: '/courses/',
  path: '/courses/',
  getParentRoute: () => rootRouteImport,
} as any)
const CoursesIdRoute = CoursesIdRouteImport.update({
  id: '/courses/$id',
  path: '/courses/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/messages': typeof MessagesRoute
  '/settings': typeof SettingsRoute
  '/courses/$id': typeof CoursesIdRoute
  '/courses': typeof CoursesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/messages': typeof MessagesRoute
  '/settings': typeof SettingsRoute
  '/courses/$id': typeof CoursesIdRoute
  '/courses': typeof CoursesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/messages': typeof MessagesRoute
  '/settings': typeof SettingsRoute
  '/courses/$id': typeof CoursesIdRoute
  '/courses/': typeof CoursesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/messages'
    | '/settings'
    | '/courses/$id'
    | '/courses'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/messages'
    | '/settings'
    | '/courses/$id'
    | '/courses'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/messages'
    | '/settings'
    | '/courses/$id'
    | '/courses/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  MessagesRoute: typeof MessagesRoute
  SettingsRoute: typeof SettingsRoute
  CoursesIdRoute: typeof CoursesIdRoute
  CoursesIndexRoute: typeof CoursesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/messages': {
      id: '/messages'
      path: '/messages'
      fullPath: '/messages'
      preLoaderRoute: typeof MessagesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses/': {
      id: '/courses/'
      path: '/courses'
      fullPath: '/courses'
      preLoaderRoute: typeof CoursesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses/$id': {
      id: '/courses/$id'
      path: '/courses/$id'
      fullPath: '/courses/$id'
      preLoaderRoute: typeof CoursesIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  MessagesRoute: MessagesRoute,
  SettingsRoute: SettingsRoute,
  CoursesIdRoute: CoursesIdRoute,
  CoursesIndexRoute: CoursesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
